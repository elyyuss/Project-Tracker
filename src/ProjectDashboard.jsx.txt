import { useState } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";

const sampleProjects = [
  {
    id: 1,
    name: "Pembangunan A",
    status: "On Going",
    deadline: "2025-06-15",
    projectValue: 500000000,
    termOfPayment: "DP dan Pelunasan",
    notes: ["Meeting dengan klien 1 Mei"],
    documents: [],
  },
  {
    id: 2,
    name: "Proyek B",
    status: "Leads",
    deadline: "2025-07-20",
    projectValue: 250000000,
    termOfPayment: "Pembayaran Langsung",
    notes: [],
    documents: [],
  },
];

export default function ProjectDashboard() {
  const [projects, setProjects] = useState(sampleProjects);
  const [newNote, setNewNote] = useState("");
  const [editId, setEditId] = useState(null);
  const [fileInputs, setFileInputs] = useState({});
  const [newDriveLinks, setNewDriveLinks] = useState({});

  const [newProject, setNewProject] = useState({
    name: "",
    status: "Leads",
    deadline: "",
    projectValue: "",
    termOfPayment: "DP dan Pelunasan",
    notes: [],
    documents: [],
  });

  const addNote = (id) => {
    setProjects((prev) =>
      prev.map((p) =>
        p.id === id ? { ...p, notes: [...p.notes, newNote] } : p
      )
    );
    setNewNote("");
  };

  const addProject = () => {
    if (editId !== null) {
      setProjects((prev) =>
        prev.map((p) =>
          p.id === editId ? { ...p, ...newProject, projectValue: parseInt(newProject.projectValue) } : p
        )
      );
      setEditId(null);
    } else {
      const newId = projects.length + 1;
      setProjects((prev) => [
        ...prev,
        { id: newId, ...newProject, projectValue: parseInt(newProject.projectValue) },
      ]);
    }
    setNewProject({
      name: "",
      status: "Leads",
      deadline: "",
      projectValue: "",
      termOfPayment: "DP dan Pelunasan",
      notes: [],
      documents: [],
    });
  };

  const editProject = (project) => {
    setNewProject({ ...project, projectValue: project.projectValue.toString() });
    setEditId(project.id);
  };

  const addDriveLink = (projectId) => {
    const rawLink = newDriveLinks[projectId];
    if (!rawLink) return;

    let embedUrl = "";
    let fileName = "Dokumen Drive";

    const docMatch = rawLink.match(/https:\/\/docs\.google\.com\/(spreadsheets|document|presentation)\/d\/([a-zA-Z0-9-_]+)/);
    if (docMatch) {
      const type = docMatch[1];
      const fileId = docMatch[2];
      embedUrl = `https://docs.google.com/${type}/d/${fileId}/preview`;
      fileName = `Google ${type.charAt(0).toUpperCase() + type.slice(1)}`;
    } else {
      const match = rawLink.match(/\/d\/([a-zA-Z0-9_-]+)\//);
      if (match) {
        const fileId = match[1];
        embedUrl = `https://drive.google.com/file/d/${fileId}/preview`;
      } else {
        return;
      }
    }

    setProjects((prev) =>
      prev.map((p) =>
        p.id === projectId
          ? { ...p, documents: [...p.documents, { name: fileName, url: embedUrl }] }
          : p
      )
    );
    setNewDriveLinks((prev) => ({ ...prev, [projectId]: "" }));
  };

  return (
    <div className="p-6 space-y-6">
      <div className="p-4 border rounded-2xl shadow-sm">
        <h3 className="text-lg font-semibold mb-4">
          {editId ? "Edit Proyek" : "Tambah Proyek Baru"}
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <Input
            placeholder="Nama Proyek"
            value={newProject.name}
            onChange={(e) => setNewProject({ ...newProject, name: e.target.value })}
          />
          <select
            value={newProject.status}
            onChange={(e) => setNewProject({ ...newProject, status: e.target.value })}
            className="border p-2 rounded-md"
          >
            <option value="Leads">Leads</option>
            <option value="On Going">On Going</option>
            <option value="Done">Done</option>
          </select>
          <Input
            type="date"
            value={newProject.deadline}
            onChange={(e) => setNewProject({ ...newProject, deadline: e.target.value })}
          />
          <Input
            type="number"
            placeholder="Nilai Proyek"
            value={newProject.projectValue}
            onChange={(e) => setNewProject({ ...newProject, projectValue: e.target.value })}
          />
          <select
            value={newProject.termOfPayment}
            onChange={(e) => setNewProject({ ...newProject, termOfPayment: e.target.value })}
            className="border p-2 rounded-md"
          >
            <option value="DP dan Pelunasan">DP dan Pelunasan</option>
            <option value="Termin">Termin</option>
            <option value="Pembayaran Langsung">Pembayaran Langsung</option>
          </select>
        </div>
        <Button onClick={addProject} className="mt-4">
          {editId ? "Simpan Perubahan" : "Simpan Proyek"}
        </Button>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {projects.map((project) => (
          <Card key={project.id} className="rounded-2xl shadow-md">
            <CardContent className="p-4 space-y-3">
              <h2 className="text-xl font-bold">{project.name}</h2>
              <p className="text-sm">Status: {project.status}</p>
              <p className="text-sm">Tanggal Mulai: {project.deadline}</p>
              <p className="text-sm">Nilai Proyek: Rp {project.projectValue.toLocaleString()}</p>
              <p className="text-sm">Term of Payment: {project.termOfPayment}</p>

              <div className="flex gap-2">
                <Button onClick={() => editProject(project)} size="sm">
                  Edit
                </Button>
              </div>

              <div>
                <h4 className="font-semibold">Catatan Meeting</h4>
                <ul className="list-disc list-inside text-sm">
                  {project.notes.map((note, index) => (
                    <li key={index}>{note}</li>
                  ))}
                </ul>
                <Textarea
                  placeholder="Tambah catatan..."
                  value={newNote}
                  onChange={(e) => setNewNote(e.target.value)}
                  className="mt-2"
                />
                <Button
                  onClick={() => addNote(project.id)}
                  className="mt-2"
                >
                  Simpan Catatan
                </Button>
              </div>

              <div>
                <h4 className="font-semibold mt-4">Dokumen Proyek (Google Drive)</h4>
                <Input
                  type="text"
                  placeholder="Tempelkan link file Google Drive (public URL)"
                  value={newDriveLinks[project.id] || ""}
                  onChange={(e) => setNewDriveLinks({ ...newDriveLinks, [project.id]: e.target.value })}
                />
                <Button onClick={() => addDriveLink(project.id)} className="mt-2">
                  Tambah Link
                </Button>
                <div className="mt-2 space-y-2">
                  {project.documents.map((doc, i) => (
                    <div key={i}>
                      <p className="text-sm font-medium">{doc.name}</p>
                      <iframe
                        src={doc.url}
                        className="w-full h-64 border"
                        title={doc.name}
                        allow="autoplay"
                      ></iframe>
                    </div>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
}
